import sys
import os
import threading
import abc
import time
import subprocess
import json
from pprint import pprint
#from rocketchat_API.rocketchat import RocketChat
from rocketchat.api import RocketChatAPI

from pip._vendor import urllib3

from Platform import Platform

""" 
        @authors:
            Alejandro Balderrama
            Nadia Karichev
            Hector Cervantes
        @description
            This class represents the platfrom manager. 
            The plugin manager will be able to start, stop, and configure Chat platform.
    """


class RocketChat(Platform):
    # fill the values here for your specific platform
    platform_name = "Rocket.Chat"
    platform_start_command = "echo 'toor' | sudo -S service snap.rocketchat-server.rocketchat-server start"
    platform_end_command = "echo 'toor' | sudo -S service snap.rocketchat-server.rocketchat-server stop"
    platform_version = ""
    # the fields below will be generated by Platform Manager
    platform_install = ""
    platform_id = 0
    processID = 0
    subplatforms = {}
    port = "3000"
    ip = "0.0.0.0"
    link = ""

    # return process ID
    def getProcessID(self):
        return self.processID

    # returns link to connect to website
    def getLink(self):
        return self.link

    # returns ip and port to connect to website
    def getIpPort(self):
        return self.ip + ":" + self.port

    # returns platform name
    def getPlatformName(self):
        return self.platform_name

    # returns where the platforms installation path
    def getPlatformInstallation(self):
        return self.platform_install

    # return the version of the platform
    def getPlatformVersion(self):
        return self.platform_version

    # return a platformID. You can pick a random value for this field.
    def getPlatformID(self):
        return self.platform_id

    # return command that starts platform
    def get_start_command(self):
        return self.platform_start_command

    # returns command to stop platform
    def get_stop_command(self):
        return self.platform_end_command

    # returns list of subplatforms
    def get_sub_platforms(self):
        return self.subplatforms

    def requestHandler(self, jsonObject):
        pass

    # sets process ID
    def setProcessID(self, processID):
        self.processID = processID

    # set link to connect to website
    def setLink(self, link):
        self.link = link

    # set ip and port to connect to website
    def setIpPort(self, ip, port):
        self.ip = ip
        self.port = port

        # set platform name

    def setPlatformName(self, platform_name):
        self.platform_name = platform_name

        # set where the platforms installation path

    def setPlatformInstallation(self, platformInstallation):
        self.platformInstallation = platformInstallation

        # sets the version of the platform

    def setPlatformVersion(self, platform_version):
        self.platform_version = platform_version

    # sets a platformID. You can pick a random value for this field.
    def setPlatformID(self, PlatformID):
        self.platform_id = PlatformID

    # sets command that starts platform
    def set_start_command(self, platform_start_command):
        self.platform_start_command = platform_start_command

    # set command to stop platform
    def set_stop_command(self, platform_end_command):
        self.platform_end_command = platform_end_command

    # set list of subplatforms
    def set_sub_platforms(self, subplatforms):
        self.subplatforms = subplatforms

    # add more methods below if you need to do more tasks

    hackathon_base_url = "http://localhost:3000"
    rcr_base_url = "http://localhost:3001"
    register = "/api/v1/users.register"
    login = "/api/v1/login"
    group = "/api/v1/groups.create"


    api = RocketChatAPI(settings={'username': 'utep.practicum2019@chat.service', 'password': 'chat.service',
                                  'domain': 'https://myrockethchatdomain.com'})

    api.create_user('email',
                    'name',
                    'password',
                    'username',
                    active=True,
                    roles=['user'],
                    join_default_channels=True,
                    require_password_change=False,
                    send_welcome_email=False,
                    verified=False,
                    customFields=None)

    api.send_message('message', 'room_id')

    api.get_private_rooms()

    #api.get_private_room_history('room_id', oldest=date)

    api.get_public_rooms()

    api.get_room_info('room_id')

    api.get_private_room_info('room_id')

    api.get_room_history('room_id')

    api.create_public_room('room_name',
                           members=[],
                           read_only=False)

    api.delete_public_room('room_id')

    api.get_my_info()

    api.get_users()

    api.get_user_info('user_id')

    api.delete_user('user_id')

    '''def POST(self, url, fields={}, headers=None):
        if not headers:
            headers = self.headers
        http = urllib3.PoolManager()
        r = http.request(
            "POST", url,
            body=json.dumps(fields),
            headers=headers)
        try:
            d = json.loads(r.data.decode('utf8'))
        except:
            print(r.data)
        return d



    def hackathon_register_user(self, hackathon_base_url, register, username, email, passw, name):
        url = hackathon_base_url + register
        data = {
            "username": username,
            "email": email,
            "pass": passw,
            "name": name
        }
        headers = {'Content-type': 'application/json'}
        d = self.POST(url, data, headers)
        print(d['_id', 'success'])

    def hackathon_login_user(self, hackathon_base_url, login, user, password):
        url = hackathon_base_url + login
        data = {"user": user,
                "password": password}

        headers = {'Content-Type': 'application/json'}
        d = self.POST(url, data, headers)
        userId = d['data']['userId']
        authToken = d['data']['authToken']
        headers = {
            "X-Auth-Token": authToken,
            "X-User-Id": userId
        }
        return headers

    # @staticmethod
    def hackathon_group_user(self, hackathon_base_url, group, name, members):
        url = hackathon_base_url + group
        data = {"name": name,
                "members": members}

        d = self.POST(url, fields=data)
        if d['success'] is True:
            print(d)
            raise ("Error Creating Channel")
        else:
            return True
    '''